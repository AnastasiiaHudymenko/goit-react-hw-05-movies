{"version":3,"file":"static/js/924.b8f339b4.chunk.js","mappings":"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","sources":["components/TrendingListMovie/TrendingList.styled.js","pages/Moviee.styled.js","components/MovieList/MovieList.jsx","pages/Movies.jsx","services/MovieServices.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 26px;\n  justify-content: center;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 20px;\n  padding: 0 10px;\n`;\n\nexport const ImgMovie = styled.img`\n  margin-bottom: 10px;\n`;\n\nexport const Item = styled.li`\n  width: 300px;\n`;\nexport const Container = styled.div`\n   max-width: 1280px;\n    padding-left: 15px;\n    padding-right: 15px;\n    margin: o auto;\n    margin: 0 auto;\n}\n`;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nexport const Container = styled.div`\n   max-width: 1280px;\n    padding-left: 15px;\n    padding-right: 15px;\n    margin: o auto;\n    margin: 0 auto;\n}\n`;\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 60px;\n  position: relative;\n`;\n\nexport const StyledInput = styled(Field)`\n  width: 50%;\n  height: 34px;\n  /* border-radius: 4px; */\n  border: none;\n  border-bottom: 1px solid orange;\n  padding-left: 20px;\n  font-size: 18px;\n  outline: none;\n`;\nexport const BtnSearch = styled.button`\n  border: none;\n  background-color: transparent;\n  padding: 0;\n  margin: 0;\n  margin-left: -47px;\n  cursor: pointer;\n`;\n\nexport const Errormsg = styled.span`\n  position: absolute;\n  bottom: -25px;\n  left: 0;\n  font-size: 20px;\n  font-style: italic;\n  color: red;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices';\nimport {\n  MoviesList,\n  MovieTitle,\n  ImgMovie,\n  Item,\n} from '../TrendingListMovie/TrendingList.styled';\nimport notFoundImg from '../../not-found.jpg';\n\nconst MovieList = ({ query }) => {\n  const [movies, setMovies] = useState(null);\n  const location = useLocation();\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    if (!query) return;\n\n    async function onRequest(query) {\n      const res = await movieServices.getMovieSearch(query);\n\n      setMovies(res);\n    }\n    onRequest(query);\n    // eslint-disable-next-line\n  }, [query, location.state]);\n\n  return (\n    <MoviesList>\n      {movies &&\n        movies.map(({ id, title, image }) => {\n          return (\n            <Item key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {image ? (\n                  <ImgMovie width={300} src={image} alt=\"\" />\n                ) : (\n                  <ImgMovie\n                    style={{ objectFit: 'cover', height: '450px' }}\n                    src={notFoundImg}\n                    alt=\"\"\n                  />\n                )}\n\n                <MovieTitle>{title}</MovieTitle>\n              </Link>\n            </Item>\n          );\n        })}\n    </MoviesList>\n  );\n};\n\nMovieList.propTypes = {\n  query: PropTypes.string,\n};\n\nexport default MovieList;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { BsSearch } from 'react-icons/bs';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  Container,\n  StyledForm,\n  StyledInput,\n  BtnSearch,\n  Errormsg,\n} from './Moviee.styled';\nimport MovieList from '../components/MovieList/MovieList';\n\nconst SignupSchema = Yup.object().shape({\n  search: Yup.string()\n    .min(2, 'Too Short!')\n    .max(70, 'Too Long!')\n    .required('Required'),\n});\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  const handlSubmit = ({ search }, action) => {\n    const nextParams = search !== '' ? { search } : {};\n\n    setSearchParams(nextParams);\n\n    action.resetForm();\n  };\n\n  return (\n    <main>\n      <Container>\n        <Formik\n          initialValues={{ search: '' }}\n          onSubmit={handlSubmit}\n          validationSchema={SignupSchema}\n        >\n          <StyledForm>\n            <label>\n              <StyledInput type=\"text\" name=\"search\" />\n              <ErrorMessage name=\"search\">\n                {msg => <Errormsg>{msg}</Errormsg>}\n              </ErrorMessage>\n            </label>\n            <BtnSearch type=\"submit\">\n              <BsSearch size={40} fill={'orange'} />\n            </BtnSearch>\n          </StyledForm>\n        </Formik>\n        <MovieList query={search} />\n      </Container>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      if (!poster_path) {\n        return {\n          title,\n          image: null,\n          id,\n        };\n      }\n      return {\n        id,\n        title,\n        image: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    vote_average,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: vote_average,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: vote_average,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["MoviesList","styled","MovieTitle","ImgMovie","Item","Container","StyledForm","Form","StyledInput","Field","BtnSearch","Errormsg","query","useState","movies","setMovies","location","useLocation","movieServices","MovieServices","useEffect","getMovieSearch","res","onRequest","state","map","id","title","image","to","from","width","src","alt","style","objectFit","height","notFoundImg","SignupSchema","Yup","shape","search","min","max","required","useSearchParams","searchParams","setSearchParams","get","initialValues","onSubmit","action","resetForm","validationSchema","type","name","msg","size","fill","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","console","log","getMovieDetalis","_transformMovieDetalis","getCastOrReviewsMovie","categorie","_transformCastMovie","cast","length","_transformReviewsMovie","_transformMovie","poster_path","overview","genres","vote_average","userScore","character","profile_path","reviews","author","content","images"],"sourceRoot":""}