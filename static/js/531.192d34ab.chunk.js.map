{"version":3,"file":"static/js/531.192d34ab.chunk.js","mappings":"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","sources":["components/CastMovie/CastMovie.jsx","services/MovieServices.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices.js';\nconst CastMovie = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    onRequest(movieId);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = async id => {\n    try {\n      const res = await movieServices.getCastOrReviewsMovie(id, 'credits');\n      setCast(res);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <ul>\n        {cast.map(({ image, name, character, id }) => {\n          return (\n            <li key={id}>\n              {image && <img src={image} alt=\"\" width={100} />}\n\n              <h2>{name}</h2>\n              <p>{character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default CastMovie;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title }) => {\n      return { id, title };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["movieId","useParams","useState","cast","setCast","movieServices","MovieServices","useEffect","onRequest","id","getCastOrReviewsMovie","res","console","log","map","image","name","character","src","alt","width","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","movies","title","poster_path","images","getMovieDetalis","_transformMovieDetalis","categorie","_transformCastMovie","length","_transformReviewsMovie","getMovieSearch","query","_transformMovie","overview","genres","popularity","userScore","profile_path","reviews","author","content"],"sourceRoot":""}