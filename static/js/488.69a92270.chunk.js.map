{"version":3,"file":"static/js/488.69a92270.chunk.js","mappings":"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","sources":["components/ReviewsMovie/ReviewsMovie.jsx","services/MovieServices.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices.js';\n\nconst ReviewsMovie = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    onRequest(movieId);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = async id => {\n    try {\n      const res = await movieServices.getCastOrReviewsMovie(id, 'reviews');\n      setReviews(res);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {reviews ? (\n        <div>\n          <ul>\n            {reviews.map(({ author, content, id }) => {\n              return (\n                <li key={id}>\n                  <h2>Author:{author}</h2>\n                  <p>Content:{content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : (\n        <p>Not found</p>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsMovie;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title }) => {\n      return { id, title };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["movieId","useParams","useState","reviews","setReviews","movieServices","MovieServices","useEffect","onRequest","id","getCastOrReviewsMovie","res","console","log","map","author","content","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","movies","title","poster_path","images","getMovieDetalis","_transformMovieDetalis","categorie","_transformCastMovie","cast","length","_transformReviewsMovie","getMovieSearch","query","_transformMovie","overview","genres","popularity","image","userScore","character","name","profile_path"],"sourceRoot":""}