{"version":3,"file":"static/js/89.b35bb976.chunk.js","mappings":"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","sources":["components/TrendingListMovie/TrendingList.styled.js","components/MovieList/MovieList.jsx","pages/Movies.jsx","services/MovieServices.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 26px;\n  justify-content: center;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 20px;\n  padding: 0 10px;\n`;\n\nexport const ImgMovie = styled.img`\n  margin-bottom: 10px;\n`;\n\nexport const Item = styled.li`\n  width: 300px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices';\nimport {\n  MoviesList,\n  MovieTitle,\n  ImgMovie,\n  Item,\n} from '../TrendingListMovie/TrendingList.styled';\nimport notFoundImg from '../../not-found.jpg';\n\nconst MovieList = ({ query }) => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    if (!query) return;\n\n    async function onRequest(query) {\n      const res = await movieServices.getMovieSearch(query);\n      setMovies(res);\n    }\n    onRequest(query);\n    // eslint-disable-next-line\n  }, [query, location.state]);\n  return (\n    <MoviesList>\n      {movies.map(({ id, title, image }) => {\n        return (\n          <Item key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {image ? (\n                <ImgMovie width={300} src={image} alt=\"\" />\n              ) : (\n                <ImgMovie\n                  style={{ objectFit: 'cover', height: '450px' }}\n                  src={notFoundImg}\n                  alt=\"\"\n                />\n              )}\n\n              <MovieTitle>{title}</MovieTitle>\n            </Link>\n          </Item>\n        );\n      })}\n    </MoviesList>\n  );\n};\n\nexport default MovieList;\n","import { Formik, Form, Field } from 'formik';\nimport { useSearchParams } from 'react-router-dom';\n\nimport MovieList from '../components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  const handlSubmit = ({ search }, action) => {\n    const nextParams = search !== '' ? { search } : {};\n\n    setSearchParams(nextParams);\n    console.log(search);\n    action.resetForm();\n  };\n\n  return (\n    <main>\n      <Formik initialValues={{ search: '' }} onSubmit={handlSubmit}>\n        <Form>\n          <label>\n            <Field type=\"text\" name=\"search\" />\n          </label>\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n      <MovieList query={search} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n      console.log(res.data.results);\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      if (!poster_path) {\n        return {\n          title,\n          image: null,\n          id,\n        };\n      }\n      return {\n        id,\n        title,\n        image: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["MoviesList","styled","MovieTitle","ImgMovie","Item","query","useState","movies","setMovies","location","useLocation","movieServices","MovieServices","useEffect","getMovieSearch","res","onRequest","state","map","id","title","image","to","from","width","src","alt","style","objectFit","height","notFoundImg","useSearchParams","searchParams","setSearchParams","search","get","initialValues","onSubmit","action","console","log","resetForm","type","name","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","getMovieDetalis","_transformMovieDetalis","getCastOrReviewsMovie","categorie","_transformCastMovie","cast","length","_transformReviewsMovie","_transformMovie","poster_path","overview","genres","popularity","userScore","character","profile_path","reviews","author","content","images"],"sourceRoot":""}