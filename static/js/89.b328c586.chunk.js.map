{"version":3,"file":"static/js/89.b328c586.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","pages/Movies.jsx","services/MovieServices.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices';\n\nconst MovieList = ({ query }) => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    if (!query) return;\n\n    async function onRequest(query) {\n      const res = await movieServices.getMovieSearch(query);\n      setMovies(res);\n    }\n    onRequest(query);\n    // eslint-disable-next-line\n  }, [query, location.state]);\n  return (\n    <ul>\n      {movies.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <p>{title}</p>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import { Formik, Form, Field } from 'formik';\nimport { useSearchParams } from 'react-router-dom';\n\nimport MovieList from '../components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  const handlSubmit = ({ search }, action) => {\n    const nextParams = search !== '' ? { search } : {};\n\n    setSearchParams(nextParams);\n    console.log(search);\n    action.resetForm();\n  };\n\n  return (\n    <main>\n      <Formik initialValues={{ search: '' }} onSubmit={handlSubmit}>\n        <Form>\n          <label>\n            <Field type=\"text\" name=\"search\" />\n          </label>\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n      <MovieList query={search} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title }) => {\n      return { id, title };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["query","useState","movies","setMovies","location","useLocation","movieServices","MovieServices","useEffect","getMovieSearch","res","onRequest","state","map","id","title","to","from","useSearchParams","searchParams","setSearchParams","search","get","initialValues","onSubmit","action","console","log","resetForm","type","name","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","poster_path","images","getMovieDetalis","_transformMovieDetalis","getCastOrReviewsMovie","categorie","_transformCastMovie","cast","length","_transformReviewsMovie","_transformMovie","overview","genres","popularity","image","userScore","character","profile_path","reviews","author","content"],"sourceRoot":""}