{"version":3,"file":"static/js/361.9f8200f8.chunk.js","mappings":"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","sources":["components/CastMovie/CastMovie.styled.js","components/CastMovie/CastMovie.jsx","services/MovieServices.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\ndisplay: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n    text-align: center;\n    justify-content: center;\n}\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 60px) / 6);\n`;\n\nexport const WrapperContent = styled.div`\n  padding: 8px 10px;\n`;\n\nexport const ImgCast = styled.img`\n  margin: 0 auto;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport MovieServices from '../../services/MovieServices.js';\nimport {\n  CastList,\n  CastItem,\n  WrapperContent,\n  ImgCast,\n} from './CastMovie.styled';\nimport notFound from '../../not-found.jpg';\n\nconst CastMovie = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    onRequest(movieId);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = async id => {\n    try {\n      const res = await movieServices.getCastOrReviewsMovie(id, 'credits');\n      setCast(res);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <CastList>\n        {cast.map(({ image, name, character, id }) => {\n          return (\n            <CastItem key={id}>\n              {image ? (\n                <ImgCast width={150} src={image} alt=\"\" />\n              ) : (\n                <ImgCast\n                  style={{ objectFit: 'cover', height: '221px' }}\n                  width={150}\n                  src={notFound}\n                  alt=\"\"\n                />\n              )}\n              <WrapperContent>\n                <p>{name}</p>\n                <p>{character}</p>\n              </WrapperContent>\n            </CastItem>\n          );\n        })}\n      </CastList>\n    </div>\n  );\n};\n\nexport default CastMovie;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      if (!poster_path) {\n        return {\n          title,\n          image: null,\n          id,\n        };\n      }\n      return {\n        id,\n        title,\n        image: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["CastList","styled","CastItem","WrapperContent","ImgCast","movieId","useParams","useState","cast","setCast","movieServices","MovieServices","useEffect","onRequest","id","getCastOrReviewsMovie","res","console","log","map","image","name","character","width","src","alt","style","objectFit","height","notFound","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","getMovieDetalis","_transformMovieDetalis","categorie","_transformCastMovie","length","_transformReviewsMovie","getMovieSearch","query","_transformMovie","movies","title","poster_path","overview","genres","popularity","userScore","profile_path","reviews","author","content","images"],"sourceRoot":""}