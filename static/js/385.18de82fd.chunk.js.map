{"version":3,"file":"static/js/385.18de82fd.chunk.js","mappings":"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","sources":["pages/MoviesDetalis.jsx","services/MovieServices.js"],"sourcesContent":["import { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useEffect, useState, Suspense } from 'react';\nimport { MutatingDots } from 'react-loader-spinner';\nimport MovieServices from '../services/MovieServices.js';\n\nconst MoviesDetalis = () => {\n  const { movieId } = useParams();\n  const [movieDetalis, setMovieDetalis] = useState([]);\n  const location = useLocation();\n  const movieServices = new MovieServices();\n\n  useEffect(() => {\n    onRequest(movieId);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = async id => {\n    try {\n      const res = await movieServices.getMovieDetalis(id);\n      setMovieDetalis(res);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const { title, image, overview, genres, userScore } = movieDetalis;\n\n  return (\n    <>\n      <div>\n        <Link to={location.state.from} state={{ from: location }}>\n          Go back{' '}\n        </Link>\n\n        {image && <img src={image} alt={title} />}\n\n        <h1>{title}</h1>\n        <h2>User score:</h2>\n        <p>{userScore}</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <h2>Genres</h2>\n        <ul>\n          {genres && genres.map(({ name, id }) => <li key={id}>{name}</li>)}\n        </ul>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={location.state}>\n              Read about our cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={location.state}>\n              Get to know the reviews\n            </Link>\n          </li>\n        </ul>\n        <Suspense\n          fallback={\n            <div>\n              <MutatingDots\n                ariaLabel=\"mutating-dots-loading\"\n                wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n              />\n            </div>\n          }\n        >\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default MoviesDetalis;\n","import axios from 'axios';\n\nclass MovieServices {\n  API_KEY = '8dbbaf50b58201a2d3381e6f92e0ca1f';\n  BASE_URL = 'https://api.themoviedb.org/3/';\n  BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  getTrendingMovies = async () => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}trending/movie/day?api_key=${this.API_KEY}`\n      );\n      return this._transformTrendingMovies(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformTrendingMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => {\n      return {\n        id,\n        title,\n        images: `${this.BASE_URL_IMG}${poster_path}`,\n      };\n    });\n  };\n\n  getMovieDetalis = async id => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}?api_key=${this.API_KEY}&language=en-US`\n      );\n      return this._transformMovieDetalis(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getCastOrReviewsMovie = async (id, categorie) => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}movie/${id}/${categorie}?api_key=${this.API_KEY}&language=en-US`\n      );\n      if (categorie === 'credits') {\n        return this._transformCastMovie(res.data.cast);\n      }\n      if (categorie === 'reviews') {\n        if (!res.data.results.length) {\n          return null;\n        } else {\n          return this._transformReviewsMovie(res.data.results);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  getMovieSearch = async query => {\n    try {\n      const res = await axios.get(\n        `${this.BASE_URL}search/movie?api_key=${this.API_KEY}&language=en-US&include_adult=false&query=${query}`\n      );\n      return this._transformMovie(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  _transformMovie = movies => {\n    return movies.map(({ id, title }) => {\n      return { id, title };\n    });\n  };\n\n  _transformMovieDetalis = ({\n    title,\n    poster_path,\n    overview,\n    genres,\n    popularity,\n  }) => {\n    if (!poster_path) {\n      return {\n        title,\n        image: null,\n        overview,\n        genres,\n        userScore: popularity,\n      };\n    }\n    return {\n      title,\n      image: `${this.BASE_URL_IMG}${poster_path}`,\n      overview,\n      genres,\n      userScore: popularity,\n    };\n  };\n\n  _transformCastMovie = cast => {\n    return cast.map(({ character, name, profile_path, id }) => {\n      if (!profile_path) {\n        return {\n          character,\n          name,\n          id,\n          image: null,\n        };\n      }\n      return {\n        character,\n        name,\n        id,\n        image: `${this.BASE_URL_IMG}${profile_path}`,\n      };\n    });\n  };\n\n  _transformReviewsMovie = reviews => {\n    return reviews.map(({ author, id, content }) => {\n      return { author, id, content };\n    });\n  };\n}\n\nexport default MovieServices;\n"],"names":["movieId","useParams","useState","movieDetalis","setMovieDetalis","location","useLocation","movieServices","MovieServices","useEffect","onRequest","id","getMovieDetalis","res","console","log","title","image","overview","genres","userScore","to","state","from","src","alt","map","name","Suspense","fallback","ariaLabel","wrapperStyle","display","justifyContent","API_KEY","BASE_URL","BASE_URL_IMG","getTrendingMovies","axios","_transformTrendingMovies","data","results","movies","poster_path","images","_transformMovieDetalis","getCastOrReviewsMovie","categorie","_transformCastMovie","cast","length","_transformReviewsMovie","getMovieSearch","query","_transformMovie","popularity","character","profile_path","reviews","author","content"],"sourceRoot":""}